@namespace MudBlazor
@using MudBlazor.Utilities
@using Microsoft.AspNetCore.Components.Routing
@inherits MudComponentBase
@inject NavigationManager NavMan

<div @attributes="UserAttributes" class="@Classname" style="@Style">
    <CascadingValue IsFixed="true" Value="@this">
        @ChildContent
    </CascadingValue>
</div>

@code {

    protected string Classname =>
    new CssBuilder("mud-layout")
        .AddClass("mud-application-layout-rtl", RightToLeft)
        .AddClass(Class)
    .Build();

    [Inject] IScrollManager ScrollManager { get; set; }

    /// <summary>
    /// Child content of component.
    /// </summary>
    [Parameter] public RenderFragment ChildContent { get; set; }

    private bool _rtl;

    /// <summary>
    /// If set, changes the layout to RightToLeft.
    /// </summary>
    [Parameter]
    public bool RightToLeft
    {
        get => _rtl;
        set
        {
            if (_rtl == value)
                return;
            _rtl = value;
            SwapDrawerAnchors();
            StateHasChanged();
        }
    }

    List<MudDrawer> _drawers = new List<MudDrawer>();

    public void Add(MudDrawer drawer)
    {
        _drawers.Add(drawer);
    }

    public void Remove(MudDrawer drawer)
    {
        _drawers.Remove(drawer);
    }

    public bool? IsDrawerOpen(Anchor anchor)
    {
        return _drawers.FirstOrDefault(d => d.Anchor == anchor)?.Open;
    }

    public bool? IsDrawerClipped(Anchor anchor)
    {
        return _drawers.FirstOrDefault(d => d.Anchor == anchor)?.Clipped;
    }

    public event Action DrawersChanged;

    public void FireDrawersChanged()
    {
        //DrawersChanged?.Invoke();
        StateHasChanged();
    }

    public bool HasDrawer(Anchor anchor)
    {
        return _drawers.Any(d => d.Anchor == anchor);
    }

    public void SwapDrawerAnchors()
    {
        foreach (var drawer in _drawers)
        {
            if (drawer.Anchor == Anchor.Left)
            {
                drawer.Anchor = Anchor.Right;
            }
            else if (drawer.Anchor == Anchor.Right)
            {
                drawer.Anchor = Anchor.Left;
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NavMan.LocationChanged += HandleLocationChanged;
    }

  
    protected async void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        //if the user clicks in a link, the navigation is intercepted and page scrolls to top
        //if the user clicks the browser back button, the navigation is not intercepted, so the scroll is restored to the last position. This is the intended behavior
        if (e.IsNavigationIntercepted)
        {
            await ScrollManager.ScrollToTop();
        }
    }

}